import java.util.Scanner;

public class Command {

	// Attributs
	private Scanner reader;
	private String word;

	// Constructeur
	public Command(Player p) {
		System.out.print(p.getPseudo() + "@ :");
		reader = new Scanner(System.in);
		this.word = null;
	}

	// commandes
	public static void ls(Server s, Player p) {
		System.out.println("***********************************************************************");
		System.out.println("Contenu du serveur "+ p.getCurrentServ().getName()+ ": ");
		for (int i = 0; i < s.getContent().length; i++) {
			System.out.println(s.getContent()[i]);
		}
	}
	
	public static void help() {
		System.out.println("ls | help | quit | backdoor | ifconfig");
	}
	
	public static void backdoor() {
		System.out.println("[================]100% Backdoor installée avec succès");
	}
	
	public static void ifconfig(Player p) {
		System.out.println("***********************************************************************");
		System.out.println("Actuellement connecté à :"+ p.getCurrentServ().getName());
		System.out.println("IP adress: 127.65.147");
		System.out.println("***********************************************************************");
	}
	
	//Getters & Setters
	public String getWord() {
		return this.word;
	}

	public void setWord(String s) {
		this.word = s;
		//je pense que c'est ici qu'il faut mettre le code qui interprete deux mots, à voir
	}
	
	
	
	
	
	//CECI POURRAIT ETRE UTILE POUR AVOIR DES COMMANDES DE PLUS D'UN MOT
	/*
	 *System.out.print(p.getPseudo() + "@ :");

        inputLine = reader.nextLine();

        // Find up to two words on the line.
        Scanner tokenizer = new Scanner(inputLine);
        if (tokenizer.hasNext()) {
            word1 = tokenizer.next();      // get first word
            if (tokenizer.hasNext()) {
                word2 = tokenizer.next();      // get second word
                // note: we just ignore the rest of the input line.
            }
        }

        // Now check whether this word is known. If so, create a command
        // with it. If not, create a "null" command (for unknown command).
        if (commands.isCommand(word1)) {
            return new Command(word1, word2);
        }
        else {
            return new Command(null, word2); 
        }*/
	
	
	
	
	
	
	
	
	
	
	
}
